@page "/ResetPassword"
@inject HttpClient http
@inject IJSRuntime jsr
@using Bismillah.Shared
@inherits LayoutComponentBase
@using MudBlazor
@using OpenQA.Selenium;
@using OpenQA.Selenium.Safari;
@using Microsoft.AspNetCore.Components.Authorization;
@using System.IO

@layout NoLayout
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager
@*@inject AuthenticationStateProvider authstate*@


<!DOCTYPE html>
<html>
<head>
    <title>Reset Password</title>
    <style>
        body {
            background-image: url('books.jpg');
            background-position: center top 1200px; /* set the position to center top */
            background-size: cover; /* set the size to cover the entire element */
            height: 50vh;
            font-family: Arial, sans-serif;
/*            background-color: #f4f4f4;*/
        }

        .container {
            margin: auto;
            top:100px;
            width: 400px;
            background-color: #fff;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0px 0px 5px 1px rgba(0,0,0,0.3);
        }

        h2 {
            text-align: center;
            margin-top: 0;
        }

        label {
            display: block;
            margin-bottom: 5px;
        }

        input[type="text"], input[type="password"] {
            display: block;
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border: none;
            border-radius: 5px;
            box-shadow: inset 0px 0px 5px 1px rgba(0,0,0,0.1);
        }

        input[type="submit"] {
            background-color: #0062CC;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }

            input[type="submit"]:hover {
                background-color: #3e8e41;
            }

        #my-alert {
            position: fixed;
            top: 80px;
            left: 20px;
            width: 300px;
            background-color: #ffffff;
            border: none;
            border-radius: 4px;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.2);
            transition: opacity 0.3s ease-in-out;
            color: #fff;
        }

        .alert-container {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px;
        }

        .alert-text {
            font-size: 16px;
            color: #FFA500;
        }

        .close-button {
            border: none;
            background-color: transparent;
            font-size: 16px;
            color: #fff;
            cursor: pointer;
            transition: color 1.0s ease-in-out;
        }

            .close-button:hover {
                color: #ccc;
            }

        .login-container {
            width: 400px;
            margin: 100px auto;
            background: #fff;
            padding: 20px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);
        }
        .login-container h1 {
            text-align: center;
            font-size: 24px;
            margin-bottom: 20px;
        }

        .login-container label {
            display: block;
            font-size: 16px;
            margin-bottom: 5px;
        }

        .login-container input[type="text"],
        .login-container input[type="password"] {
            width: 100%;
            padding: 10px;
            margin-bottom: 20px;
            border-radius: 5px;
            border: none;
            background: #f2f2f2;
            color: #333;
            font-size: 16px;
        }

        .login-container button {
            display: block;
            width: 100%;
            padding: 10px;
            border: none;
            border-radius: 5px;
            background: #007bff;
            color: #fff;
            font-size: 16px;
            cursor: pointer;
        }

            .login-container button:hover {
                background: #0062cc;
            }

        .container-fluid {
            background: #0062cc;
        }

        .navbar-expand-lg {
            background: #0062cc;
        }

    </style>
</head>
<body>
    <div class="container-fluid">
        <nav class="navbar navbar-expand-lg navbar-light bg-light">
            <a class="navbar-brand" href="#">FLEX PORTAL</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
        </nav>
    </div>
    <div class="login-container">
        <br />
        <br />
        <h2>Reset Password</h2>
        <form action="#" method="post">
            <label for="username">Username:</label>
            <input type="text" id="username" name="username" required @bind="Username">
            <label for="old-password">Old Password:</label>
            <input type="password" id="old-password" name="old-password" required @bind="Password">
            <label for="new-password">New Password:</label>
            <input type="password" id="new-password" name="new-password" required @bind="NewPassword">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="login-button" OnClick="@HandleLogin">Reset Password</MudButton>
        </form>
    </div>
</body>
</html>





@code {


    public string Username { get; set; } = string.Empty;
    private string Password { get; set; } = string.Empty;
    public string NewPassword { get; set; } = string.Empty;
    List<LoginModel> LoginDataStudent = new List<LoginModel>();
    List<LoginModelFaculty> LoginDataFaculty = new List<LoginModelFaculty>();
    List<LoginModelAdmin> LoginDataAdmin = new List<LoginModelAdmin>();
    private string FacultyUsername { get; set; }
    UpdateModel passwordsys = new UpdateModel();


    private bool showAlert = false;

    protected async override Task OnInitializedAsync()
    {
        ApiRequest.http = http;
        ApiRequest.jsr = jsr;
        MudItems.Snackbar = Snackbar;
        Username = "";
        await jsr.InvokeVoidAsync("localStorage.clear");

    }

    private void ShowAlert()
    {
        showAlert = true;
        StateHasChanged();
    }

    private void HideAlert()
    {
        showAlert = false;
        StateHasChanged();
    }
    protected async Task HandleLogin()
    {

        //NavigationManager.NavigateTo("/StudentHomepage");

        FacultyUsername = Username;

        if (Username == "")
        {
            Console.WriteLine("KHAALI");
            ShowAlert();
            await jsr.InvokeVoidAsync("eval", "document.getElementById('my-alert').style.display = 'block';");
            // Set timer to hide alert after 5 seconds
            await Task.Delay(5000);
            HideAlert();
        }

        else if (Char.IsDigit(Username[0]))
        {
            var i = await http.GetFromJsonAsync<List<int>>($"api/Auth/VerificationStudent/{Username}");
            if (i.ToList()[0] > 0)
            {
                LoginDataStudent = await http.GetFromJsonAsync<List<LoginModel>>($"api/Auth/student/{Username}");
                if (LoginDataStudent.ToList()[0].Roll_no == Username & LoginDataStudent.ToList()[0].FLEXPASSWORD == Password)
                {
                    passwordsys.Roll_No = Username;
                    passwordsys.Program = NewPassword;
                    await ApiRequest.PostRequest<SuccessMessageModel>("api/Auth/ResetStudent", passwordsys);
                    await jsr.InvokeVoidAsync("writeToFile", "hello.txt", "User " + Username + " changed password at" + DateTime.Now.ToString() + " \n");

                    NavigationManager.NavigateTo($"/Login");
                }
                else
                {
                    ShowAlert();
                    await jsr.InvokeVoidAsync("eval", "document.getElementById('my-alert').style.display = 'block';");
                    // Set timer to hide alert after 5 seconds
                    await Task.Delay(5000);
                    HideAlert();
                }
            }
            else
            {

                Console.WriteLine("Student User Does not exists");
            }
        }
        else if (Username[0] == 'A')
        {
            //Admin

            var i = await http.GetFromJsonAsync<List<int>>($"api/Auth/VerificationAdmin/{Username}");
            if (i.ToList()[0] > 0)
            {
                LoginDataAdmin = await http.GetFromJsonAsync<List<LoginModelAdmin>>($"api/Auth/Admin/{Username}");
                Console.WriteLine("Mein bhi Admin Hoon");
                if (LoginDataAdmin.ToList()[0].AdminID == Username & LoginDataAdmin.ToList()[0].AdminPassword == Password)
                {
                    passwordsys.Roll_No = Username;
                    passwordsys.Program = NewPassword;
                    await ApiRequest.PostRequest<SuccessMessageModel>("api/Auth/ResetAdmin", passwordsys);
                    await jsr.InvokeVoidAsync("writeToFile", "hello.txt", "User " + Username + " Logged In at" + DateTime.Now.ToString() + " \n");
                    Console.WriteLine("SUCCESS");
                    NavigationManager.NavigateTo($"/Login");
                }
                else
                {
                    ShowAlert();
                    await jsr.InvokeVoidAsync("eval", "document.getElementById('my-alert').style.display = 'block';");
                    // Set timer to hide alert after 5 seconds
                    await Task.Delay(5000);
                    HideAlert();
                }
            }
            else
            {
                Console.WriteLine("Admin User Does not exists");
            }
        }
        else
        {
            var i = await http.GetFromJsonAsync<List<int>>($"api/Auth/VerificationFaculty/{FacultyUsername}");
            if (i.ToList()[0] > 0)
            {
                LoginDataFaculty = await http.GetFromJsonAsync<List<LoginModelFaculty>>($"api/Auth/faculty/{FacultyUsername}");
                if (LoginDataFaculty.ToList()[0].FacultyID == Username & LoginDataFaculty.ToList()[0].FLEXPASSWORD == Password)
                {
                    passwordsys.Roll_No = Username;
                    passwordsys.Program = NewPassword;
                    await ApiRequest.PostRequest<SuccessMessageModel>("api/Auth/ResetFaculty", passwordsys);
                    await jsr.InvokeVoidAsync("writeToFile", "hello.txt", "User " + Username + " Changed password at" + DateTime.Now.ToString() + " \n");
                    NavigationManager.NavigateTo("/Login");
                }
                else
                {
                    ShowAlert();
                    await jsr.InvokeVoidAsync("eval", "document.getElementById('my-alert').style.display = 'block';");
                    // Set timer to hide alert after 5 seconds
                    await Task.Delay(5000);
                    HideAlert();
                }
            }
            else
            {
                Console.WriteLine("Faculty User Does not exists");
            }

        }


    }
}


@*








    //Upload Assignment
*@